#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MiniOS Installer
A graphical tool for installing MiniOS onto a disk via GTK.

Usage:
    minios-installer

Copyright (C) 2025 MiniOS Linux
Author: crims0n <crims0n@minios.dev>
Original idea: FershoUno <https://github.com/FershoUno>
"""

import os
import re
import sys
import gi
import gettext
import subprocess
import threading
import shutil
import tempfile

gi.require_version('Gtk', '3.0')
gi.require_version('Gio', '2.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, GLib, Gio, Gdk, Pango

# ──────────────────────────────────────────────────────────────────────────────
# Constants
# ──────────────────────────────────────────────────────────────────────────────
APPLICATION_ID   = 'org.minios.installer'
APP_NAME         = 'minios-installer'
APP_TITLE        = 'MiniOS Installer'
LOCALE_DIRECTORY = '/usr/share/locale'
CSS_FILE_PATH    = '/usr/share/minios-installer/style.css'

ICON_WINDOW      = 'usb-creator-gtk'
ICON_INSTALL     = 'document-save-symbolic'
ICON_CONFIGURE   = 'preferences-system-symbolic'

# ──────────────────────────────────────────────────────────────────────────────
# Internationalization
# ──────────────────────────────────────────────────────────────────────────────
gettext.bindtextdomain(APP_NAME, LOCALE_DIRECTORY)
gettext.textdomain(APP_NAME)
_ = gettext.gettext

# ──────────────────────────────────────────────────────────────────────────────
# Helper Functions
# ──────────────────────────────────────────────────────────────────────────────

def run_command(cmd: list[str], error_message: str) -> str:
    """
    Run subprocess.check_output(cmd). On failure, raise RuntimeError(error_message).
    """
    try:
        return subprocess.check_output(cmd, text=True, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        raise RuntimeError(error_message)


def find_available_disks() -> list[dict]:
    """
    Return a list of available block devices with name, size, model, serial, transport, icon.
    """
    output = run_command(
        ['lsblk','-P','-o','NAME,SIZE,MODEL,SERIAL,ROTA,TRAN','-d','-n','-I','3,8,179,259,252'],
        _("Failed to retrieve disk list.")
    )
    devices = []
    for line in output.splitlines():
        props = {k.lower(): v for k, v in re.findall(r'(\w+)="([^"]*)"', line)}
        name = props.get('name')
        if not name or name.startswith(('loop','nbd')):
            continue

        size   = props.get('size','')
        model  = props.get('model','')
        serial = props.get('serial','')
        rota   = props.get('rota','0') == '1'
        tran   = props.get('tran','')

        if tran == 'usb':
            icon = 'drive-removable-media-usb'
        elif rota:
            icon = 'drive-harddisk-symbolic'
        else:
            icon = 'media-flash-symbolic'

        devices.append({
            'name': name,
            'size': size,
            'model': model,
            'serial': serial,
            'transport': tran or ('rotational' if rota else 'non‑rotational'),
            'icon': icon
        })
    return devices


def detect_filesystem_tools() -> list[str]:
    """
    Detect which mkfs.* tools are available and return filesystem types.
    """
    fss = []
    if shutil.which('mkfs.ext4'):
        fss.append('ext4')
    if shutil.which('mkfs.ext2'):
        fss.append('ext2')
    if shutil.which('mkfs.btrfs'):
        fss.append('btrfs')
    if shutil.which('mkfs.vfat'):
        fss.append('fat32')
    if shutil.which('mkfs.ntfs'):
        fss.append('ntfs')
    return fss


def get_disk_size_mib(device: str) -> int:
    """
    Return disk size in MiB (integer) by parsing parted output.
    """
    output = run_command(
        ['parted','-s',device,'unit','MiB','print'],
        _("Failed to get disk size.")
    )
    for line in output.splitlines():
        if device in line:
            m = re.search(r'(\d+(?:\.\d+)?)MiB', line)
            if m:
                return int(float(m.group(1)))
    raise RuntimeError(_("Could not parse disk size."))


def partition_disk(device: str, fs: str, use_gpt: bool) -> None:
    """
    Partition the disk; if fs is not 'fat32', create an EFI partition.
    """
    efi = (fs != 'fat32')
    if efi and use_gpt:
        run_command(['parted','-s',device,'mklabel','gpt'], _("Failed to set GPT label on ") + device + ".")
        size = get_disk_size_mib(device) - 100
        run_command(
            ['parted','-s',device,'mkpart','primary',fs,'1MiB',f'{size}MiB'],
            _("Failed to create primary partition on ") + device + "."
        )
        run_command(
            ['parted','-s',device,'mkpart','ESP','fat32',f'{size}MiB','100%'],
            _("Failed to create EFI partition on ") + device + "."
        )
        run_command(['parted','-s',device,'set','2','boot','on'], _("Failed to set boot flag."))
    elif efi:
        run_command(['parted','-s',device,'mklabel','msdos'], _("Failed to set MSDOS label on ") + device + ".")
        size = get_disk_size_mib(device) - 100
        run_command(
            ['parted','-s',device,'mkpart','primary',fs,'1MiB',f'{size}MiB'],
            _("Failed to create primary partition on ") + device + "."
        )
        run_command(
            ['parted','-s',device,'mkpart','primary','fat32',f'{size}MiB','100%'],
            _("Failed to create second partition on ") + device + "."
        )
        run_command(['parted','-s',device,'set','1','boot','on'], _("Failed to set boot flag."))
    else:
        run_command(['parted','-s',device,'mklabel','msdos'], _("Failed to set MSDOS label on ") + device + ".")
        run_command(
            ['parted','-s',device,'mkpart','primary',fs,'1MiB','100%'],
            _("Failed to create primary partition on ") + device + "."
        )


def zero_fill_disk(device: str) -> None:
    """
    Overwrite the beginning of the disk with zeros.
    """
    try:
        subprocess.check_call(
            ['dd','if=/dev/zero',f'of={device}','bs=4096','count=273','status=none'],
            stderr=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError:
        raise RuntimeError(_("Failed to erase ") + device + ".")


def format_partitions(primary: str, fs: str, efi: str | None) -> None:
    """
    Format the primary partition (and EFI partition if provided).
    """
    if fs == 'fat32':
        run_command(['mkfs.vfat', primary], _("Failed to format ") + primary + ".")
    elif fs in ('btrfs','ntfs','exfat'):
        run_command([f'mkfs.{fs}','-f',primary], _("Failed to format ") + primary + ".")
    else:
        run_command([f'mkfs.{fs}','-F',primary], _("Failed to format ") + primary + ".")

    if efi:
        run_command(['mkfs.vfat', efi], _("Failed to format EFI ") + efi + ".")


def mount_partition(part: str, mount_dir: str) -> None:
    """
    Mount the partition to mount_dir, creating or clearing the directory first.
    """
    if os.path.ismount(mount_dir):
        raise RuntimeError(_("Destination ") + mount_dir + _(" is already mounted."))
    if os.path.isdir(mount_dir) and os.listdir(mount_dir):
        shutil.rmtree(mount_dir, ignore_errors=True)
    os.makedirs(mount_dir, exist_ok=True)

    fs_type = run_command(
        ['blkid','-o','value','-s','TYPE',part],
        _("Could not determine filesystem type of ") + part + "."
    ).strip()
    if subprocess.call(['mount','-t',fs_type,part,mount_dir]) != 0:
        raise RuntimeError(_("Failed to mount ") + part + ".")


def unmount_partitions(primary: str, efi: str | None, m1: str, m2: str | None) -> None:
    """
    Unmount primary and optional EFI partitions and remove mount directories.
    """
    for part, mnt in ((primary, m1), (efi, m2)):
        if part and subprocess.call(['grep','-qs',part,'/proc/mounts']) == 0:
            subprocess.call(['umount', part])
            if mnt and os.path.isdir(mnt):
                try:
                    os.rmdir(mnt)
                except Exception:
                    pass


def copy_minios_files(src: str, dst: str, progress_cb, log_cb, config_override: str = None) -> None:
    """
    Copy all MiniOS files (including boot/EFI) from src → dst/minios/...
    If config_override is given, use it as minios/config.conf.
    """
    total = int(run_command(['du','-b','-s',src], _("Failed to get size of ") + src + ".").split()[0])
    copied = 0
    entries: list[tuple[str,str]] = []
    owner = getattr(progress_cb, "__self__", None)

    # 1) Main tree → minios/
    for root, dirs, files in os.walk(src):
        for fn in files:
            rel = os.path.relpath(os.path.join(root, fn), src)
            # теперь пропускаем только changes/, а EFI не пропускаем
            if rel.startswith('changes/'):
                continue
            entries.append((os.path.join('minios', rel), os.path.join(root, fn)))

    # Дальше остальное без изменений...
    # 2) .disk/info
    with open('/tmp/info', 'w', encoding='utf-8') as f:
        f.write('MiniOS')
    entries.append(('.disk/info', '/tmp/info'))

    # 3) config.conf
    config_dst = 'minios/config.conf'
    if config_override and os.path.exists(config_override):
        entries.append((config_dst, config_override))
    else:
        config_src = '/etc/live/config.conf'
        if os.path.exists(config_src):
            entries.append((config_dst, config_src))

    # Копируем из entries и обновляем прогресс
    for rel, path in entries:
        if owner and owner.cancel_requested:
            log_cb(_("Installation canceled by user."))
            raise RuntimeError(_("Installation canceled by user."))
        dest = os.path.join(dst, rel)
        os.makedirs(os.path.dirname(dest), exist_ok=True)
        shutil.copy2(path, dest)
        log_cb(_("Copied file: ") + path)
        size = os.path.getsize(path)
        copied += size
        percent = int(18 + (78 * copied / total))
        progress_cb(percent, _("Copying MiniOS files: ") + rel)

    # Убедимся, что есть базовые директории
    for sub in ('boot','modules','changes','scripts'):
        p = os.path.join(dst, 'minios', sub)
        os.makedirs(p, exist_ok=True)
        log_cb(_("Created directory: ") + p)


def copy_efi_files(src: str, dst: str, log_cb) -> None:
    """
    Copy EFI files from src/boot/EFI → dst/EFI/...
    """
    efi_dir = os.path.join(src, 'boot', 'EFI')
    if not os.path.isdir(efi_dir):
        return

    for root, dirs, files in os.walk(efi_dir):
        for fn in files:
            rel = os.path.relpath(os.path.join(root, fn), efi_dir)
            src_path = os.path.join(root, fn)
            dest_path = os.path.join(dst, 'EFI', rel)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            shutil.copy2(src_path, dest_path)
            log_cb(_("Copied EFI file: ") + src_path)


def install_bootloader(device: str, primary: str, efi: str | None, progress_cb, log_cb) -> None:
    """
    Install the EXT Linux bootloader; write MBR if needed.
    Aborts immediately if cancellation is requested.
    """
    # Check for user cancellation
    owner = getattr(progress_cb, "__self__", None)
    if owner and owner.cancel_requested:
        raise RuntimeError(_("Installation canceled by user."))

    # Prepare paths
    boot_dir = os.path.join("/mnt/install", os.path.basename(primary), "minios", "boot")
    log_cb(_("Entering bootloader directory: ") + boot_dir)

    # Notify progress
    progress_cb(96, _("Setting up bootloader."))
    arch = subprocess.check_output(['uname', '-m'], text=True).strip()
    exe = 'extlinux.x64' if arch == 'x86_64' else 'extlinux.x32'
    exe_path = os.path.join(boot_dir, exe)

    # Check if EXTLINUX is executable; try remount+chmod if not
    if not os.access(exe_path, os.X_OK):
        try:
            subprocess.run(
                ['mount', '-o', 'remount,exec', boot_dir],
                cwd=boot_dir,
                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                check=True
            )
            log_cb(_("Remounted boot directory with exec."))
        except subprocess.CalledProcessError:
            log_cb(_("Failed to remount boot directory; proceeding."))
        os.chmod(exe_path, 0o755)
        log_cb(_("Made extlinux executable."))

    # If still not executable, copy to extlinux.exe and adjust exe/exe_path
    if not os.access(exe_path, os.X_OK):
        fallback_name = 'extlinux.exe'
        fallback_path = os.path.join(boot_dir, fallback_name)
        shutil.copy2(exe_path, fallback_path)
        os.chmod(fallback_path, 0o755)
        log_cb(_("Copied extlinux to fallback: ") + fallback_name)
        exe = fallback_name
        exe_path = fallback_path

    # Try primary extlinux install, logging output line by line
    proc = subprocess.run(
        [exe_path, '--install', boot_dir],
        cwd=boot_dir,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        text=True
    )
    for line in proc.stdout.splitlines():
        log_cb(line)
    for line in proc.stderr.splitlines():
        log_cb(line)

    # If primary failed, try fallback in /tmp
    if proc.returncode != 0:
        log_cb(_("extlinux install failed (code {code}), trying fallback in /tmp...").format(code=proc.returncode))
        tmp_exe = os.path.join('/tmp', exe)
        shutil.copy2(exe_path, tmp_exe)
        os.chmod(tmp_exe, 0o755)
        proc2 = subprocess.run(
            [tmp_exe, '--install', boot_dir],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            text=True
        )
        for line in proc2.stdout.splitlines():
            log_cb(line)
        for line in proc2.stderr.splitlines():
            log_cb(line)

        if proc2.returncode != 0:
            raise RuntimeError(_("Error installing boot loader (fallback code {code}).").format(code=proc2.returncode))
        else:
            os.remove(tmp_exe)
            log_cb(_("Boot loader installation succeeded via fallback."))
    else:
        log_cb(_("Ran extlinux installer (code {code}).").format(code=proc.returncode))

    # Write MBR and set active partition if needed
    if device != primary:
        mbr = os.path.join(boot_dir, 'mbr.bin')
        subprocess.check_call(
            ['dd', 'bs=440', 'count=1', 'conv=notrunc', f'if={mbr}', f'of={device}'],
            stderr=subprocess.DEVNULL
        )
        log_cb(_("Wrote MBR to ") + device + ".")

        # Deactivate existing active partitions
        try:
            fdisk_output = subprocess.check_output(['fdisk', '-l', device], text=True)
        except subprocess.CalledProcessError:
            fdisk_output = ""
        old_parts = []
        for line in fdisk_output.splitlines():
            m = re.match(r'^(\S+)\s+\*', line)
            if m and m.group(1).startswith(device):
                num = re.sub(r'.*[^0-9]', '', m.group(1))
                if num:
                    old_parts.append(num)

        # Build fdisk commands: toggle off old, toggle on new, then write
        cmds = []
        for old in old_parts:
            cmds += ['a', old]
        part_num = re.sub(r'.*[^0-9]', '', primary)
        cmds += ['a', part_num, 'w']
        fd_input = "\n".join(cmds) + "\n"
        subprocess.run(
            ['fdisk', device],
            input=fd_input, text=True,
            stderr=subprocess.DEVNULL
        )
        log_cb(_("Set partition active: ") + primary + ".")

    # Cleanup fallback binary if it exists in boot_dir
    fallback = os.path.join(boot_dir, 'extlinux.exe')
    if os.path.isfile(fallback):
        try:
            os.remove(fallback)
            log_cb(_("Removed fallback binary: extlinux.exe."))
        except OSError:
            pass


def apply_css_if_exists():
    """
    Load and apply CSS if the file exists.
    """
    provider = Gtk.CssProvider()
    if os.path.exists(CSS_FILE_PATH):
        provider.load_from_path(CSS_FILE_PATH)
        Gtk.StyleContext.add_provider_for_screen(
            Gdk.Screen.get_default(),
            provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )


# ──────────────────────────────────────────────────────────────────────────────
# InstallerWindow Definition
# ──────────────────────────────────────────────────────────────────────────────

class InstallerWindow(Gtk.ApplicationWindow):
    def __init__(self, application: Gtk.Application):
        super().__init__(application=application, title=_(APP_TITLE))
        self.set_default_size(600, 450)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_icon_name(ICON_WINDOW)

        self.selected_device     = None
        self.selected_filesystem = None
        self.use_gpt             = False
        self.create_efi          = False
        self.cancel_requested    = False

        self.p1 = None
        self.m1 = None
        self.config_path = None
        self.temp_config_path = None  # путь к временному конфигу

        self.main_vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12)
        for m in ("set_margin_top","set_margin_bottom","set_margin_start","set_margin_end"):
            getattr(self.main_vbox, m)(12)
        self.add(self.main_vbox)

        # Apply CSS if available
        apply_css_if_exists()

        # Build the user interface
        self._build_header_bar()
        self._build_selection_ui()

        self.connect("destroy", lambda w: application.quit())

    # ──────────────────────────────────────────────────────────────────────────
    # UI construction
    # ──────────────────────────────────────────────────────────────────────────
    def _build_header_bar(self):
        header = Gtk.HeaderBar(show_close_button=True)
        header.props.title = _(APP_TITLE)
        self.set_titlebar(header)

    def _build_selection_ui(self):
        """
        Build disk list, filesystem combo, and Install button.
        """
        for child in self.main_vbox.get_children():
            self.main_vbox.remove(child)

        lbl = Gtk.Label(label=_("Please select a target disk and filesystem:"), xalign=0)
        lbl.set_margin_bottom(8)
        self.main_vbox.pack_start(lbl, False, False, 0)

        hb = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=20)
        self.main_vbox.pack_start(hb, True, True, 0)

        # Disk list
        vb_disk = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vb_disk.pack_start(Gtk.Label(label=_("Select Target Disk:"), xalign=0), False, False, 0)

        self.disk_list = Gtk.ListBox(selection_mode=Gtk.SelectionMode.SINGLE)
        self.disk_list.connect("row-selected", self._on_disk_selected)

        for dev in find_available_disks():
            row = Gtk.ListBoxRow()
            h = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=8)
            img = Gtk.Image.new_from_gicon(Gio.ThemedIcon(name=dev['icon']), Gtk.IconSize.DIALOG)
            h.pack_start(img, False, False, 0)
            text = f"<b>{dev['name']}</b> ({dev['size']})"
            if dev['model']:
                text += f" \u2014 {GLib.markup_escape_text(dev['model'])}"
            lbl_dev = Gtk.Label()
            lbl_dev.set_markup(text)
            lbl_dev.set_xalign(0)
            h.pack_start(lbl_dev, True, True, 0)
            row.add(h)
            row.device = f"/dev/{dev['name']}"
            self.disk_list.add(row)

        sw = Gtk.ScrolledWindow()
        sw.set_min_content_width(350)
        sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.disk_list)
        vb_disk.pack_start(sw, True, True, 0)
        hb.pack_start(vb_disk, True, True, 0)

        # Filesystem combo and information
        vb_fs = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vb_fs.pack_start(Gtk.Label(label=_("Select Filesystem Type:"), xalign=0), False, False, 0)

        hfs = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.combo_fs = Gtk.ComboBoxText(hexpand=True)
        for fs in detect_filesystem_tools():
            self.combo_fs.append_text(fs)
        self.combo_fs.set_active(-1)
        self.combo_fs.connect("changed", self._on_fs_selected)
        hfs.pack_start(self.combo_fs, True, True, 0)

        info = Gtk.Image.new_from_icon_name("dialog-information", Gtk.IconSize.SMALL_TOOLBAR)
        eb = Gtk.EventBox()
        eb.add(info)
        eb.set_tooltip_markup(
            _("<b>ext4</b> (best choice)\n"
            "  + Stable and has journaling.\n"
            "  + Fast performance with large-file support.\n"
            "  - Not compatible with Windows, Mac and most hardware devices.\n\n"
            "<b>ext2</b>\n"
            "  + Minimal write overhead preserves flash lifespan.\n"
            "  + Simple structure is easy to recover.\n"
            "  - No journaling increases risk of data loss if unplugged.\n"
            "  - Not compatible with Windows, Mac and most hardware devices.\n\n"
            "<b>btrfs</b>\n"
            "  + Snapshots enable easy rollback.\n"
            "  + Built-in compression saves space.\n"
            "  - Complex configuration may be needed.\n"
            "  - Additional metadata can slow transfers on USB drives.\n"
            "  - Not compatible with Windows, Mac and most hardware devices.\n\n"
            "<b>FAT32</b>\n"
            "  + Universally readable by Windows, macOS, and Linux.\n"
            "  + No extra drivers or setup needed.\n"
            "  - 4 GiB file size limit.\n"
            "  - No journaling increases risk of data loss if unplugged.\n"
            "  - FUSE-based persistence reduce performance.\n\n"
            "<b>NTFS</b>\n"
            "  + Supports large files and has journaling.\n"
            "  + Native Windows support; fast read/write in Linux via ntfs3.\n"
            "  - Not compatible with Mac and most hardware devices.\n"
            "  - FUSE-based persistence reduce performance.\n\n")
        )
        hfs.pack_start(eb, False, False, 0)
        vb_fs.pack_start(hfs, False, False, 0)
        hb.pack_start(vb_fs, True, True, 0)

        # Install button
        self.btn_install = Gtk.Button(label=_("Install"))
        self.btn_install.get_style_context().add_class('suggested-action')
        self.btn_install.set_image(Gtk.Image.new_from_icon_name(ICON_INSTALL, Gtk.IconSize.BUTTON))
        self.btn_install.set_always_show_image(True)
        self.btn_install.set_sensitive(False)
        self.btn_install.connect("clicked", self._on_install_clicked)
        self.btn_install.set_margin_top(12)
        self.main_vbox.pack_start(self.btn_install, False, False, 0)

        # Кнопка запуска конфигураторов
        self.btn_cfg = Gtk.Button(label=_("Configure MiniOS before installation"))
        self.btn_cfg.get_style_context().add_class('suggested-action')
        self.btn_cfg.set_margin_top(12)
        self.btn_cfg.set_image(Gtk.Image.new_from_icon_name(ICON_CONFIGURE, Gtk.IconSize.BUTTON))
        self.btn_cfg.set_always_show_image(True)
        self.btn_cfg.connect("clicked", self._on_launch_configurator)
        self.main_vbox.pack_start(self.btn_cfg, False, False, 0)

        self.show_all()

    def _on_disk_selected(self, listbox, row):
        self.selected_device = getattr(row, 'device', None)
        self.selected_disk_info = None  # Store disk info for warning dialog
        try:
            size_mib = get_disk_size_mib(self.selected_device)
            self.use_gpt = (size_mib > 2_097_152)
        except Exception:
            self.use_gpt = False        
        # Save disk info for later use in warning dialog
        if row:
            dev_name = getattr(row, 'device', None)
            dev_short = dev_name.replace("/dev/", "") if dev_name else None
            for dev in find_available_disks():
                if dev.get('name') == dev_short:
                    size = dev.get('size', '')
                    model = dev.get('model', '')
                    serial = dev.get('serial', '')
                    desc = []
                    if model:
                        desc.append(model)
                    if size:
                        desc.append(size)
                    if serial:
                        desc.append(f"SN: {serial}")
                    self.selected_disk_info = {
                        'device': dev_name,
                        'desc': " — " + ", ".join(desc) if desc else ""
                    }
                    break
        else:
            self.selected_disk_info = None
        self._update_install_sensitive()

    def _on_fs_selected(self, combo):
        text = combo.get_active_text()
        self.selected_filesystem = text or None
        self.create_efi = bool(text and text != 'fat32')
        self._update_install_sensitive()

    def _update_install_sensitive(self):
        ok = bool(self.selected_device and self.selected_filesystem)
        self.btn_install.set_sensitive(ok)

    def _on_install_clicked(self, button):
        # Show confirmation warning before proceeding
        self._show_erase_warning()

    def _show_erase_warning(self):
        # Remove all widgets from main_vbox
        for child in self.main_vbox.get_children():
            self.main_vbox.remove(child)

        # Use cached disk info if available
        disk_info = self.selected_disk_info or {}
        disk_label = disk_info.get('device') or _("selected device")
        disk_desc = disk_info.get('desc') or ""

        warning = Gtk.Label()
        warning.set_markup(
            f'<span size="large" weight="bold" foreground="red">{_("All data on the selected device will be lost!")}</span>\n\n'
            f'<b>{disk_label}{GLib.markup_escape_text(disk_desc)}</b>'
        )
        warning.set_justify(Gtk.Justification.CENTER)
        warning.set_margin_top(40)
        warning.set_margin_bottom(20)
        warning.set_line_wrap(True)
        self.main_vbox.pack_start(warning, True, True, 0)

        btn_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=24)
        btn_box.set_halign(Gtk.Align.CENTER)

        btn_cancel = Gtk.Button(label=_("Go Back"))
        btn_cancel.get_style_context().add_class('destructive-action')
        btn_cancel.connect("clicked", lambda b: self._build_selection_ui())
        btn_box.pack_start(btn_cancel, False, False, 0)

        btn_continue = Gtk.Button(label=_("Continue"))
        btn_continue.get_style_context().add_class('suggested-action')
        btn_continue.connect("clicked", self._on_confirm_install)
        btn_box.pack_start(btn_continue, False, False, 0)

        self.main_vbox.pack_start(btn_box, False, False, 0)
        self.show_all()

    def _on_confirm_install(self, button):
        self._build_progress_ui()
        threading.Thread(target=self._run_install_sequence, daemon=True).start()

    def _build_progress_ui(self):
        for child in self.main_vbox.get_children():
            self.main_vbox.remove(child)

        self.lbl_status = Gtk.Label(label=_("Preparing to install…"), xalign=0)
        self.lbl_status.set_line_wrap(True)
        self.lbl_status.set_line_wrap_mode(Pango.WrapMode.WORD_CHAR)
        self.main_vbox.pack_start(self.lbl_status, False, False, 0)

        self.progress = Gtk.ProgressBar()
        self.progress.set_fraction(0.0)
        self.main_vbox.pack_start(self.progress, False, False, 0)

        # Toggle log view button
        self.btn_toggle = Gtk.ToggleButton(label=_("Show Log"))
        self.btn_toggle.connect("toggled", self._on_toggle_log)
        self.main_vbox.pack_start(self.btn_toggle, False, False, 0)

        # Cancel button
        self.btn_cancel = Gtk.Button(label=_("Cancel"))
        self.btn_cancel.get_style_context().add_class('destructive-action')
        self.btn_cancel.set_sensitive(True)
        self.btn_cancel.connect("clicked", self._on_cancel)
        self.main_vbox.pack_end(self.btn_cancel, False, False, 0)

        # Log view
        self.log_buf = Gtk.TextBuffer()
        self.log_view = Gtk.TextView(buffer=self.log_buf)
        self.log_view.set_editable(False)
        self.log_view.set_wrap_mode(Gtk.WrapMode.WORD_CHAR)
        self.log_view.set_monospace(True)

        self.log_sw = Gtk.ScrolledWindow()
        self.log_sw.set_min_content_height(200)
        self.log_sw.add(self.log_view)

        self.show_all()

    def _on_toggle_log(self, toggle):
        if toggle.get_active():
            toggle.set_label(_("Hide Log"))
            self.main_vbox.pack_start(self.log_sw, True, True, 0)
            self.log_sw.show_all()
        else:
            toggle.set_label(_("Show Log"))
            self.main_vbox.remove(self.log_sw)

    def _on_cancel(self, button):
        if not self.cancel_requested:
            self.cancel_requested = True

            # reset progress/bar
            GLib.idle_add(self.progress.set_fraction, 0.0)
            GLib.idle_add(self.lbl_status.set_text, _("Installation canceled."))
            GLib.idle_add(self._append_log, _("Installation canceled by user."))

            # disable the Cancel button (GTK will add the "insensitive" state)
            GLib.idle_add(self.btn_cancel.set_sensitive, False)

    def _report_progress(self, percent: int, message: str):
        fraction = percent / 100.0
        GLib.idle_add(self.progress.set_fraction, fraction)
        GLib.idle_add(self.lbl_status.set_text, message)
        GLib.idle_add(self._append_log, message)

    def _append_log(self, message: str):
        timestamp = GLib.DateTime.new_now_local().format("%Y-%m-%d %H:%M:%S")
        text = f"[{timestamp}] {message}\n"
        end_iter = self.log_buf.get_end_iter()
        self.log_buf.place_cursor(end_iter)
        self.log_buf.insert_at_cursor(text)

    def _log_async(self, message: str):
        # Always schedule _append_log on the GTK main loop
        GLib.idle_add(self._append_log, message)


    def _run_install_sequence(self):
        dev = self.selected_device
        fs  = self.selected_filesystem
        use_gpt = self.use_gpt
        if dev.startswith("/dev/nvme") or dev.startswith("/dev/mmcblk"):
            # For NVMe and MMC devices, use partition names like nvme0n1p1
            p1, p2 = f"{dev}p1", f"{dev}p2"
        else:
            p1, p2 = f"{dev}1", f"{dev}2"
        m1 = f"/mnt/install/{os.path.basename(p1)}"
        m2 = f"/mnt/install/{os.path.basename(p2)}" if self.create_efi else None

        self.p1 = p1
        self.m1 = m1
        # Use temporary config if available, otherwise use standard
        config_override = self.temp_config_path if (self.temp_config_path and os.path.exists(self.temp_config_path)) else None
        self.config_path = config_override or '/etc/live/config.conf'

        steps = [
            ( 0,  _("Unmounting disk…"),       lambda: unmount_partitions(p1, p2, m1, m2)),
            ( 2,  _("Erasing disk…"),          lambda: zero_fill_disk(dev)),
            ( 4,  _("Partitioning disk…"),     lambda: partition_disk(dev, fs, use_gpt)),
            ( 8,  _("Formatting partitions…"), lambda: format_partitions(p1, fs, p2 if self.create_efi else None)),
            (15,  _("Mounting partition…"),    lambda: mount_partition(p1, m1)),
        ]

        for percent, message, func in steps:
            if self.cancel_requested:
                return
            self._report_progress(percent, message)
            try:
                func()
            except Exception as e:
                if self.cancel_requested:
                    return
                import traceback
                tb = traceback.format_exc()
                GLib.idle_add(self._append_log, _("Error at step “") + message + _("”:"))
                GLib.idle_add(self._append_log, tb)
                GLib.idle_add(self._show_error, _("Installation failed: ") + str(e))
                return

        if self.create_efi and not self.cancel_requested:
            self._report_progress(18, _("Mounting EFI partition…"))
            try:
                mount_partition(p2, m2)
            except Exception as e:
                if self.cancel_requested:
                    return
                import traceback
                tb = traceback.format_exc()
                GLib.idle_add(self._append_log, _("Error mounting EFI partition:"))
                GLib.idle_add(self._append_log, tb)
                GLib.idle_add(self._show_error, _("Installation failed: ") + str(e))
                return

        if not self.cancel_requested:
            self._report_progress(18, _("Copying files…"))
            candidates = [
                "/run/initramfs/memory/data/minios",
                "/run/initramfs/memory/iso/minios",
                "/run/initramfs/memory/toram",
                "/run/initramfs/memory/data/from/0/minios"
            ]
            src = next(
                (c for c in candidates
                 if os.path.isdir(c)
                 and os.path.exists(os.path.join(c, "boot", "vmlinuz"))),
                None
            )
            if not src:
                if not self.cancel_requested:
                    GLib.idle_add(self._show_error, _("Cannot find MiniOS image."))
                return
            try:
                copy_minios_files(src, m1, self._report_progress, self._log_async, config_override)
                if not self.create_efi:
                    self._report_progress(50, _("Copying EFI files to root…"))
                    copy_efi_files(src, m1, self._log_async)
                elif self.create_efi:
                    self._report_progress(50, _("Copying EFI files to ESP…"))
                    copy_efi_files(src, m2, self._log_async)
            except Exception as e:
                if self.cancel_requested:
                    return
                import traceback
                tb = traceback.format_exc()
                GLib.idle_add(self._append_log, _("Error during file copy:"))
                GLib.idle_add(self._append_log, tb)
                GLib.idle_add(self._show_error, _("Installation failed: ") + str(e))
                return

        if not use_gpt and fs != 'exfat' and not self.cancel_requested:
            self._report_progress(96, _("Setting up bootloader…"))
            try:
                install_bootloader(
                    dev, p1,
                    p2 if self.create_efi else None,
                    self._report_progress,
                    self._log_async
                )
            except Exception as e:
                if self.cancel_requested:
                    return
                import traceback
                tb = traceback.format_exc()
                GLib.idle_add(self._append_log, _("Error setting up bootloader:"))
                GLib.idle_add(self._append_log, tb)
                GLib.idle_add(self._show_error, _("Installation failed: ") + str(e))
                return

        if not self.cancel_requested:
            self._report_progress(98, _("Unmounting disk…"))
            try:
                unmount_partitions(p1, p2, m1, m2)
            except Exception as e:
                if self.cancel_requested:
                    return
                import traceback
                tb = traceback.format_exc()
                GLib.idle_add(self._append_log, _("Error during unmount:"))
                GLib.idle_add(self._append_log, tb)
                GLib.idle_add(self._show_error, _("Installation failed: ") + str(e))
                return
            self._report_progress(100, _("Installation complete!"))
            # Disable the Cancel button since installation has finished
            GLib.idle_add(self.btn_cancel.set_sensitive, False)
            # Add Launch Configurator button
            GLib.idle_add(self._add_config_button)

    def _show_error(self, message: str):
        dlg = Gtk.MessageDialog(
            transient_for=self,
            modal=True,
            destroy_with_parent=True,
            message_type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.OK,
            text=_("Installation Error")
        )
        dlg.format_secondary_text(message)
        dlg.run()
        dlg.destroy()
    
    def _add_config_button(self):
        """
        Больше не нужна, оставляем пустой метод для совместимости вызова
        """
        pass

    def _on_launch_configurator(self, button):
        """
        Copy the standard config to a temp file and launch the configurator with it.
        """
        src_config = '/etc/live/config.conf'
        if not os.path.exists(src_config):
            dlg = Gtk.MessageDialog(
                transient_for=self,
                modal=True,
                destroy_with_parent=True,
                message_type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                text=_("Config file not found")
            )
            dlg.format_secondary_text(_(f"Standard config file not found at {src_config}."))
            dlg.run()
            dlg.destroy()
            return

        fd, temp_path = tempfile.mkstemp(prefix="minios-config-", suffix=".conf")
        os.close(fd)
        shutil.copy2(src_config, temp_path)
        self.temp_config_path = temp_path

        try:
            subprocess.Popen(['minios-configurator', temp_path])
        except Exception as e:
            dlg = Gtk.MessageDialog(
                transient_for=self,
                modal=True,
                destroy_with_parent=True,
                message_type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                text=_("Launch Error")
            )
            dlg.format_secondary_text(str(e))
            dlg.run()
            dlg.destroy()
            return


# ──────────────────────────────────────────────────────────────────────────────
# Application Class and Entry Point
# ──────────────────────────────────────────────────────────────────────────────

class MiniOSInstallerApp(Gtk.Application):
    def __init__(self):
        super().__init__(application_id=APPLICATION_ID)
        self.window = None

    def do_activate(self):
        if self.window:
            self.window.present()
        else:
            if os.geteuid() != 0:
                dlg = Gtk.MessageDialog(
                    modal=True,
                    destroy_with_parent=False,
                    message_type=Gtk.MessageType.ERROR,
                    buttons=Gtk.ButtonsType.OK,
                    text=_("Root Privileges Required")
                )
                dlg.format_secondary_text(_("This installer must be run as root."))
                dlg.run()
                dlg.destroy()
                sys.exit(1)

            self.window = InstallerWindow(self)
            self.window.show_all()
            self.window.present()


def main():
    app = MiniOSInstallerApp()
    return app.run(sys.argv)

if __name__ == '__main__':
    sys.exit(main())
