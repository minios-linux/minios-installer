#!/bin/bash

# This script is used for installing MiniOS on a disk.

# --- Variable Declarations ---
# Set the version number and current working directory
VERSION="1.1"
CWD="$(pwd)"

# Set text domain
export TEXTDOMAIN="minios-installer"

# Regular expression pattern for filtering disks
REGEX='^$'

# --- Functions ---
# Check if the script is running as root, if not, run with root privileges using pkexec
check_root_permissions() {
    if [[ "${EUID}" -ne 0 ]]; then
        if command -v yad &>/dev/null || [[ -n "${DISPLAY}" ]]; then
            pkexec "$0"
            exit 0
        else
            echo "This script should be run as 'root'!"
            exit 1
        fi
    fi
}

# Show help message
show_help() {
    echo "$(gettext "Usage"): $0 [options]"
    echo "$(gettext "Options"):"
    echo "  -d, --device DEVICE        $(gettext "Set the device to install MiniOS on")"
    echo "  -f, --filesystem FS        $(gettext "Set the filesystem to use (e.g., ext4, btrfs, etc.)")"
    echo "  -e, --efi                  $(gettext "Enable EFI support")"
    echo "      --help                 $(gettext "Show this help message")"
}

# Parse command-line options
parse_options() {
    while [[ "$#" -gt 0 ]]; do
        case $1 in
        -d | --device)
            DEV="/dev/$2"
            shift
            ;;
        -f | --filesystem)
            FS="$2"
            shift
            ;;
        -e | --efi) EFI_SUPPORT="TRUE" ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            echo "$(gettext "Unknown parameter passed"): $1"
            show_help
            exit 1
            ;;
        esac
        shift
    done
}

# List available disks
list_disks() {
    DISKS="$(lsblk -Jo NAME,SIZE -n -d -I 3,8,259,252 | jq -r '.blockdevices[] | .name + "(" + .size + ")"')"
    DISKS="$(echo ${DISKS} | tr ' ' '!')"
    FILESYSTEMS="ext4!ext2!btrfs!fat32!ntfs"
}

# Get disk size in MiBs
get_disk_size() {
    parted -s "${1}" unit MiB print 2>/dev/null | grep "${1}" | cut -d' ' -f3 | tr -d "MiB"
}

# Partition the disk
partition_disk() {
    if [ "${FS}" = "exfat" ]; then
        EFI_SUPPORT="TRUE"
    fi
    if [ "${EFI_SUPPORT}" = "TRUE" ]; then
        if [ "${GPT_SUPPORT}" = "TRUE" ]; then
            parted -s "${DEV}" mklabel gpt
            DISK_SIZE="$(get_disk_size ${DEV})"
            ESP_START="$((DISK_SIZE - 100))"
            parted -s "${DEV}" mkpart primary 1MiB ${ESP_START}MiB
            parted -s "${DEV}" mkpart ESP fat32 ${ESP_START}MiB 100%
            parted -s "${DEV}" set 2 boot on
        else
            parted -s "${DEV}" mklabel msdos
            DISK_SIZE="$(get_disk_size ${DEV})"
            ESP_START="$((DISK_SIZE - 100))"
            parted -s "${DEV}" mkpart primary fat32 1MiB ${ESP_START}MiB
            parted -s "${DEV}" mkpart primary fat32 ${ESP_START}MiB 100%
            parted -s "${DEV}" set 1 boot on
        fi
    else
        parted -s "${DEV}" mklabel msdos
        parted -s "${DEV}" mkpart primary ext2 1MiB 100%
    fi
}

# Wipe the disk
wipe_disk() {
    dd if=/dev/zero of="${DEV}" bs=4096 count=273
}

# Format the partition
format_partition() {
    if [ "${FS}" = "fat32" ]; then
        mkfs.vfat "${PART}"
    elif [ "${FS}" = "btrfs" ] || [ "${FS}" = "ntfs" ]; then
        mkfs."${FS}" -f "${PART}"
    else
        mkfs."${FS}" "${PART}"
    fi
    if [ "${EFI_SUPPORT}" = "TRUE" ]; then
        mkfs.vfat "${EFI_PART}"
    fi
}

# Mount the partition
mount_part() {
    if [ ! -d "${DESTINATION}" ]; then
        mkdir -p "${DESTINATION}"
        if ! mount "${PART}" "${DESTINATION}"; then
            exit 1
        fi
    fi
    if [ "${EFI_SUPPORT}" = "TRUE" ]; then
        if [ ! -d "${EFI_DESTINATION}" ]; then
            mkdir -p "${EFI_DESTINATION}"
            if ! mount "${EFI_PART}" "${EFI_DESTINATION}"; then
                exit 1
            fi
        fi
    fi
    trap "umount ${DESTINATION} ${EFI_DESTINATION} 2>/dev/null; rmdir ${DESTINATION} ${EFI_DESTINATION} 2>/dev/null" EXIT
}

# Unmount the partition
umount_part() {
    if mountpoint -q "${DESTINATION}"; then
        umount "${DESTINATION}"
        rmdir "${DESTINATION}"
    fi
    if mountpoint -q "${EFI_DESTINATION}"; then
        umount "${EFI_DESTINATION}"
        rmdir "${EFI_DESTINATION}"
    fi
    if mount | grep -q "${PART}"; then
        umount "${PART}"
    fi
    if mount | grep -q "${EFI_PART}"; then
        umount "${EFI_PART}"
    fi
}

# Copy MiniOS files to the destination partition
copy_files() {
    if [ -d /run/initramfs/memory ]; then
        SOURCE="/run/initramfs/memory"
    elif [ -d /memory ]; then
        SOURCE="/memory"
    fi
    if [ -e "${SOURCE}/data/minios/boot/vmlinuz" ]; then
        MINIOS="${SOURCE}/data/minios"
    elif [ -e "${SOURCE}/iso/minios/boot/vmlinuz" ]; then
        MINIOS="${SOURCE}/iso/minios"
    elif [ -e "${SOURCE}/toram/boot/vmlinuz" ]; then
        MINIOS="${SOURCE}/toram"
    elif [ -e "${SOURCE}/data/from/0/minios/boot/vmlinuz" ]; then
        MINIOS="${SOURCE}/data/from/0/minios"
    fi

    if [ "${MINIOS}" = "" ]; then
        echo "Cannot find boot/vmlinuz in MiniOS data" >&2
        exit 2
    fi
    EFI="${MINIOS}/boot/EFI"
    echo "MiniOS" >/tmp/info
    cat <<EOF >/tmp/README
* To install MiniOS, copy the contents of the ISO to the root of the media,
  then run minios\boot\bootinst.bat on Windows, or minios/boot/bootinst.sh
  on Linux.
* When installed on media with fat32 and ntfs file systems, changes in
  persistent changes mode will be saved in the minios\changes\changes.dat.x
  files, the files expands dynamically, the maximum size of each file is 4 GB.
* When installed on media with ext2-ext4, btrfs file systems, changes in
  the persistent changes mode will be saved in the minios\changes folder with
  no size limit.
EOF
    GRAFT=$(
        cd "${MINIOS}"
        find . -type f | sed -r "s:^[.]/::" | egrep -v "^changes/" | egrep -v "$REGEX" | while read LINE; do
            echo "minios/${LINE}=${MINIOS}/${LINE}"
        done
        cd "${EFI}"
        find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
            echo "EFI/${LINE}=${EFI}/${LINE}"
        done
        echo ".disk/info=/tmp/info"
        echo "README=/tmp/README"
        echo "minios/minios.conf=/etc/minios/minios.conf"
        echo "minios/boot/grub/grub.cfg=/etc/minios/grub.cfg"
        echo "minios/boot/syslinux.cfg=/etc/minios/syslinux.cfg"
    )
    while IFS='=' read -r DESTINATION_FILE SOURCE_FILE; do
        echo "Copying ${SOURCE_FILE} to ${DESTINATION}/${DESTINATION_FILE}"
        mkdir -p "${DESTINATION}/$(dirname "${DESTINATION_FILE}")"
        cp "${SOURCE_FILE}" "${DESTINATION}/${DESTINATION_FILE}"
    done <<<"${GRAFT}"
    mkdir -p "${DESTINATION}/minios"/{boot,modules,changes,scripts}
    if [ "${EFI_SUPPORT}" = "TRUE" ]; then
        GRAFT=$(
            cd "${EFI}"
            find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
                echo "EFI/${LINE}=${EFI}/${LINE}"
            done
        )
        while IFS='=' read -r DESTINATION_FILE SOURCE_FILE; do
            echo "Copying ${SOURCE_FILE} to ${EFI_DESTINATION}/${DESTINATION_FILE}"
            mkdir -p "${EFI_DESTINATION}/$(dirname "${DESTINATION_FILE}")"
            cp "${SOURCE_FILE}" "${EFI_DESTINATION}/${DESTINATION_FILE}"
        done <<<"${GRAFT}"
    fi
}

# Install the boot record
install_boot_record() {
    BOOT="${DESTINATION}/minios/boot"
    cd "${BOOT}"
    ARCH=$(uname -m)
    if [ "${ARCH}" = "x86_64" ]; then ARCH=64; else ARCH=32; fi
    EXTLINUX="extlinux.x${ARCH}"
    if [ ! -x "./${EXTLINUX}" ]; then
        mount -o remount,exec "${DEV}"
        chmod a+x "./${EXTLINUX}"
    fi
    if [ ! -x "./${EXTLINUX}" ]; then
        cp -f "./${EXTLINUX}" ./extlinux.exe
        EXTLINUX=extlinux.exe
    fi
    "./${EXTLINUX}" --install "${BOOT}"
    if [ $? -ne 0 ]; then
        echo "Error installing boot loader."
        exit 1
    fi
    if [ "${DEV}" != "${PART}" ]; then
        dd bs=440 count=1 conv=notrunc if="${BOOT}/mbr.bin" of="${DEV}" 2>/dev/null
        PART="$(echo "${PART}" | sed -r "s:.*[^0-9]::")"
        (
            fdisk -l "${DEV}" | fgrep "*" | fgrep "${DEV}" | cut -d " " -f 1 |
                sed -r "s:.*[^0-9]::" | xargs -I '{}' echo -ne "a\n{}\n"
            echo a
            echo "${PART}"
            echo w
        ) | fdisk "${DEV}" >/dev/null 2>&1
    fi
    echo "Boot installation finished."
    cd "${CWD}"
}

# Show error message
show_error_message() {
    local ERROR_MESSAGE="${1}"
    yad --center --borders=10 \
        --window-icon="usb-creator-gtk" \
        --title="$(gettext 'Error')" \
        --error \
        --text="$(gettext 'An error occurred during the installation of MiniOS on disk.')"
    exit 1
}

# Confirmation question for installation
installation_warning() {
    INSTALLATION_WARNING=$(
        yad --form --center \
            --borders=10 \
            --window-icon="usb-creator-gtk" \
            --title="$(gettext 'WARNING!')" \
            --text="<span foreground=\"red\" font=\"Bold\" font-size=\"large\">$(gettext 'All data on the selected device will be lost!')</span>\n<span font-size=\"large\">$(gettext 'Selected device:')</span><span font=\"Bold\" font-size=\"large\">${DEV}</span>" \
            --text-align="center" \
            --width=400 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --button="$(gettext 'Return')!edit-undo":120 \
            --button="$(gettext 'Continue')!gtk-ok":121
    )
    local BUTTON=$?

    case "${BUTTON}" in
    120) # Return Main Menu
        main_menu
        ;;
    121) # Continue installation
        install_minios | yad --center --borders=10 --window-icon="usb-creator-gtk" --progress --width=250 --height=100 --title="$(gettext 'MiniOS Installer')" --text="$(gettext 'Installing...')" --auto-close --auto-kill
        ;;
    esac
}

# Perform the MiniOS installation process
install_minios() {
    echo "0"
    umount_part || show_error_message
    echo "5"
    wipe_disk || show_error_message
    echo "10"
    partition_disk || show_error_message
    echo "15"
    format_partition || show_error_message
    echo "20"
    mount_part || show_error_message
    echo "25"
    copy_files || show_error_message
    echo "90"
    if [ "${GPT_SUPPORT}" != "TRUE" ] && [ "${FS}" != "exfat" ]; then
        install_boot_record || show_error_message
    fi
    echo "95"
    umount_part || show_error_message
    echo "100"
    final_question
}

# Display the main menu for selecting installation options
main_menu() {
    list_disks
    MAIN_FORM=$(
        yad --form --center \
            --borders=10 \
            --window-icon="usb-creator-gtk" \
            --title="$(gettext 'MiniOS Installer')" \
            --text="<span font-size=\"large\">$(gettext 'Select installation options for MiniOS:')</span>\n" \
            --text-align="center" \
            --width=300 --height=200 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --field="$(gettext 'Select device'):CB" "${DISKS}" \
            --field="$(gettext 'Select file system'):CB" "${FILESYSTEMS}" \
            --field="$(gettext 'EFI'):CHK" \
            --button="$(gettext 'Cancel')!gtk-cancel":101 \
            --button="$(gettext 'Install')!usb-creator-gtk":102 \
            --button="$(gettext 'Reload')!gtk-refresh":103
    )
    local BUTTON=$?
    echo "${BUTTON}" "${MAIN_FORM}"
    DEV_DESC=$(echo "${MAIN_FORM}" | cut -d"|" -f1)
    DEV_NAME=$(echo "${DEV_DESC}" | cut -d "(" -f 1)
    if [[ "${DEV_NAME}" == "nvme"* ]]; then
        PART_NAME="${DEV_NAME}p1"
        EFI_PART_NAME="${DEV_NAME}p2"
    else
        PART_NAME="${DEV_NAME}1"
        EFI_PART_NAME="${DEV_NAME}2"
    fi
    DEV="/dev/${DEV_NAME}"
    PART="/dev/${PART_NAME}"
    EFI_PART="/dev/${EFI_PART_NAME}"
    FS=$(echo "${MAIN_FORM}" | cut -d "|" -f2)
    EFI_SUPPORT=$(echo "${MAIN_FORM}" | cut -d "|" -f3)
    DESTINATION="/mnt/install/${PART_NAME}"
    EFI_DESTINATION="/mnt/install/${EFI_PART_NAME}"

    case "${BUTTON}" in
    101)
        exit 0
        ;;
    102)
        installation_warning
        ;;
    103)
        main_menu
        ;;
    esac
}

#
final_question() {
    FINAL_FORM=$(
        yad --form --center \
            --borders=10 \
            --window-icon="usb-creator-gtk" \
            --title="$(gettext 'MiniOS Installer')" \
            --text="$(gettext 'Thank you for installing MiniOS.')" \
            --width=200 --height=100 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --button="$(gettext 'Finish')!gtk-ok":101 \
            --button="$(gettext 'Reboot')!gtk-refresh":102
    )
    local BUTTON=$?

    case "${BUTTON}" in
    101) # Finish MiniOS Installer
        exit
        ;;
    102) # Restart the Computer
        reboot
        ;;
    esac
}

# Check if the script is running as root, if not, run with root privileges using pkexec
check_root_permissions

# Parse command-line options
parse_options "$@"

# Check if graphical environment is available and yad is installed
if ! command -v yad &>/dev/null || [[ -z "${DISPLAY}" ]]; then
    echo "Graphical environment or yad is not available. Running in text mode."
    show_help
    exit 1
fi

# Start the installation process by displaying the main menu
main_menu
